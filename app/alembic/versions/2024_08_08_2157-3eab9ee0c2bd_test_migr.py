"""test_migr

Revision ID: 3eab9ee0c2bd
Revises: 
Create Date: 2024-08-08 21:57:24.140809

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text


# revision identifiers, used by Alembic.
revision: str = '3eab9ee0c2bd'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def create_function():
    return '''
    CREATE OR REPLACE FUNCTION create_answers()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO answers (user_card_id, right_answers, wrong_answers)
        VALUES (NEW.id, 0, 0);
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    '''

def create_trigger():
    return '''
    CREATE TRIGGER after_insert_user_card
    AFTER INSERT ON user_card
    FOR EACH ROW
    EXECUTE FUNCTION create_answers();
    '''

def drop_trigger():
    return '''
    DROP TRIGGER IF EXISTS after_insert_user_card ON user_card;
    '''

def drop_function():
    return '''
    DROP FUNCTION IF EXISTS create_answers;
    '''



def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_categories')),
    sa.UniqueConstraint('name', name=op.f('uq_categories_name'))
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('permissions', sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_role'))
    )
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)
    op.create_index(op.f('ix_role_username'), 'role', ['username'], unique=True)
    op.create_table('cards',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('english', sa.String(length=100), nullable=False),
    sa.Column('russian', sa.String(length=100), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('difficulty', sa.Integer(), nullable=True),
    sa.CheckConstraint('difficulty IS NULL OR difficulty IN (1, 2, 3)', name=op.f('ck_cards_check_difficulty')),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f('fk_cards_category_id_categories')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_cards'))
    )
    op.create_index(op.f('ix_cards_english'), 'cards', ['english'], unique=False)
    op.create_index(op.f('ix_cards_id'), 'cards', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('registered_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name=op.f('fk_users_role_id_role')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('user_card',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('card_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], name=op.f('fk_user_card_card_id_cards')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_card_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_card')),
    sa.UniqueConstraint('user_id', 'card_id', name='uq_user_card')
    )
    op.create_index(op.f('ix_user_card_id'), 'user_card', ['id'], unique=False)
    op.create_table('answers',
    sa.Column('user_card_id', sa.Integer(), nullable=False),
    sa.Column('right_answers', sa.Integer(), nullable=False),
    sa.Column('wrong_answers', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_card_id'], ['user_card.id'], name=op.f('fk_answers_user_card_id_user_card')),
    sa.PrimaryKeyConstraint('user_card_id', name=op.f('pk_answers'))
    )
    # ### end Alembic commands ###
    op.execute(text(create_function()))
    op.execute(text(create_trigger()))


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('answers')
    op.drop_index(op.f('ix_user_card_id'), table_name='user_card')
    op.drop_table('user_card')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_cards_id'), table_name='cards')
    op.drop_index(op.f('ix_cards_english'), table_name='cards')
    op.drop_table('cards')
    op.drop_index(op.f('ix_role_username'), table_name='role')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_table('role')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
    op.execute(text(create_function()))
    op.execute(text(create_trigger()))
